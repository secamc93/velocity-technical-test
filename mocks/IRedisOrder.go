// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	dtos "velocity-technical-test/internal/domain/orders/dtos"

	mock "github.com/stretchr/testify/mock"
)

// IRedisOrder is an autogenerated mock type for the IRedisOrder type
type IRedisOrder struct {
	mock.Mock
}

// GetOrder provides a mock function with given fields: key
func (_m *IRedisOrder) GetOrder(key string) (dtos.OrderDTORedis, error) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetOrder")
	}

	var r0 dtos.OrderDTORedis
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (dtos.OrderDTORedis, error)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) dtos.OrderDTORedis); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(dtos.OrderDTORedis)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrderStatus provides a mock function with given fields: key
func (_m *IRedisOrder) GetOrderStatus(key string) (string, error) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetOrderStatus")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// KeyExists provides a mock function with given fields: key
func (_m *IRedisOrder) KeyExists(key string) (bool, error) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for KeyExists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetJSON provides a mock function with given fields: key, status, value
func (_m *IRedisOrder) SetJSON(key string, status string, value interface{}) error {
	ret := _m.Called(key, status, value)

	if len(ret) == 0 {
		panic("no return value specified for SetJSON")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, interface{}) error); ok {
		r0 = rf(key, status, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateOrderStatus provides a mock function with given fields: key, newStatus
func (_m *IRedisOrder) UpdateOrderStatus(key string, newStatus string) error {
	ret := _m.Called(key, newStatus)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrderStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(key, newStatus)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIRedisOrder creates a new instance of IRedisOrder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIRedisOrder(t interface {
	mock.TestingT
	Cleanup(func())
}) *IRedisOrder {
	mock := &IRedisOrder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
