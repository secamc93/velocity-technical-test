// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	dtos "velocity-technical-test/internal/domain/products/dtos"

	mock "github.com/stretchr/testify/mock"
)

// IProductRepository is an autogenerated mock type for the IProductRepository type
type IProductRepository struct {
	mock.Mock
}

// CountProductStock provides a mock function with given fields: productID
func (_m *IProductRepository) CountProductStock(productID uint) (uint, error) {
	ret := _m.Called(productID)

	if len(ret) == 0 {
		panic("no return value specified for CountProductStock")
	}

	var r0 uint
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (uint, error)); ok {
		return rf(productID)
	}
	if rf, ok := ret.Get(0).(func(uint) uint); ok {
		r0 = rf(productID)
	} else {
		r0 = ret.Get(0).(uint)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(productID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProductName provides a mock function with given fields: productID
func (_m *IProductRepository) GetProductName(productID uint) (string, error) {
	ret := _m.Called(productID)

	if len(ret) == 0 {
		panic("no return value specified for GetProductName")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (string, error)); ok {
		return rf(productID)
	}
	if rf, ok := ret.Get(0).(func(uint) string); ok {
		r0 = rf(productID)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(productID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProductPrice provides a mock function with given fields: productID
func (_m *IProductRepository) GetProductPrice(productID uint) (float64, error) {
	ret := _m.Called(productID)

	if len(ret) == 0 {
		panic("no return value specified for GetProductPrice")
	}

	var r0 float64
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (float64, error)); ok {
		return rf(productID)
	}
	if rf, ok := ret.Get(0).(func(uint) float64); ok {
		r0 = rf(productID)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(productID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProducts provides a mock function with no fields
func (_m *IProductRepository) GetProducts() ([]dtos.ProductDTO, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetProducts")
	}

	var r0 []dtos.ProductDTO
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]dtos.ProductDTO, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []dtos.ProductDTO); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dtos.ProductDTO)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProductExists provides a mock function with given fields: productID
func (_m *IProductRepository) ProductExists(productID uint) (bool, error) {
	ret := _m.Called(productID)

	if len(ret) == 0 {
		panic("no return value specified for ProductExists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (bool, error)); ok {
		return rf(productID)
	}
	if rf, ok := ret.Get(0).(func(uint) bool); ok {
		r0 = rf(productID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(productID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProductStock provides a mock function with given fields: productID, newStock
func (_m *IProductRepository) UpdateProductStock(productID uint, newStock uint) error {
	ret := _m.Called(productID, newStock)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProductStock")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, uint) error); ok {
		r0 = rf(productID, newStock)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIProductRepository creates a new instance of IProductRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIProductRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *IProductRepository {
	mock := &IProductRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
