// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	gorm "gorm.io/gorm"
)

// DBConnection is an autogenerated mock type for the DBConnection type
type DBConnection struct {
	mock.Mock
}

// CloseDB provides a mock function with no fields
func (_m *DBConnection) CloseDB() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CloseDB")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetDB provides a mock function with no fields
func (_m *DBConnection) GetDB() *gorm.DB {
	ret := _m.Called()

	var r0 *gorm.DB
	if rf, ok := ret.Get(0).(func() *gorm.DB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		} else {
			r0 = &gorm.DB{} // Ensure a non-nil *gorm.DB is returned
		}
	}

	return r0
}

// PingDB provides a mock function with no fields
func (_m *DBConnection) PingDB() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for PingDB")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Reconnect provides a mock function with no fields
func (_m *DBConnection) Reconnect() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Reconnect")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewDBConnection creates a new instance of DBConnection. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDBConnection(t interface {
	mock.TestingT
	Cleanup(func())
}) *DBConnection {
	mock := &DBConnection{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
